//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9a74173a-f5cf-4959-b1cd-d0d8c4332b7f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0ac88533-06a4-4142-9ec7-294b60440e95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d88d3d09-0b2d-4d56-8b64-a0ccf87ff6d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fall"",
                    ""type"": ""Button"",
                    ""id"": ""f2556d97-6c10-479b-b5a9-85335bd46915"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""43ca3cb0-a71f-4c06-9f00-599705eec33a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WJump"",
                    ""type"": ""Button"",
                    ""id"": ""c65d6f4a-ee66-4745-93b4-45b74533e0dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Value"",
                    ""id"": ""cdccb527-2024-46ed-84a7-ff07c66bad4e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""725b5bb3-c76a-4607-be1f-543190def66e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""32494924-89c8-46b3-ac6b-ffe4e0479afc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5bdf347c-5eea-437d-86d3-3a8af13b3b0a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5f079b44-fd32-4848-9d79-3e52e441a7cc"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d6b25028-5d77-4723-a0b5-bcef7c6e95b2"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33643bd8-3eae-42d9-a80b-0b20c18b51a4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0085af5-c939-41c7-94e1-ce7594e950bb"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83b9cf4a-65f8-4a23-9cb3-3af8e675a4ca"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d77ab2-289e-4d61-8a76-25049b1281d1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ae320edf-346c-4ba5-8cfd-f316ede9a6a3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""21f8e616-fee4-4b57-9cd8-c01f0dfd0fdf"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""db22b1fe-3a1a-4d6d-a949-6a5234f7fc41"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e5d6b0c5-5961-4442-85e2-a9d12c9dbedd"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9d4c5f16-8a0f-479e-848a-833492015934"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SelectScreen"",
            ""id"": ""c62ca533-0064-40d3-b3b5-10baebe4def6"",
            ""actions"": [
                {
                    ""name"": ""Player1Switch"",
                    ""type"": ""Button"",
                    ""id"": ""c87aae66-7682-4b07-9319-dd78f967f1b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2Switch"",
                    ""type"": ""Button"",
                    ""id"": ""a581b640-44f8-4b59-bf22-6a49d6c9f0b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""3d4e6aa1-8c12-4768-844c-1bfcdc1788d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99e032e6-60b7-4744-b6b4-abc549de8533"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a50c1fc8-8a07-4dc8-bac8-71769ca5e630"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""767fa536-2c14-44a5-8c6d-21e21fa611e0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StartScreen"",
            ""id"": ""9263eae9-b9a8-4f0b-9f74-62a95af1553f"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""f8c31664-6960-4cec-a6d6-a6cfe8540d9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ee10f34-e041-48fb-b3d5-dc6849d1244d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EndScreen"",
            ""id"": ""5c1c6724-231a-4150-99d6-3ac88a5c828c"",
            ""actions"": [
                {
                    ""name"": ""Rematch"",
                    ""type"": ""Button"",
                    ""id"": ""5d9aa7b9-1d99-400b-ac18-73c27d559bab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20e3f355-ebe7-4c37-b8e0-52846834cdd4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rematch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Fall = m_Player.FindAction("Fall", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_WJump = m_Player.FindAction("WJump", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        // SelectScreen
        m_SelectScreen = asset.FindActionMap("SelectScreen", throwIfNotFound: true);
        m_SelectScreen_Player1Switch = m_SelectScreen.FindAction("Player1Switch", throwIfNotFound: true);
        m_SelectScreen_Player2Switch = m_SelectScreen.FindAction("Player2Switch", throwIfNotFound: true);
        m_SelectScreen_StartGame = m_SelectScreen.FindAction("StartGame", throwIfNotFound: true);
        // StartScreen
        m_StartScreen = asset.FindActionMap("StartScreen", throwIfNotFound: true);
        m_StartScreen_StartGame = m_StartScreen.FindAction("StartGame", throwIfNotFound: true);
        // EndScreen
        m_EndScreen = asset.FindActionMap("EndScreen", throwIfNotFound: true);
        m_EndScreen_Rematch = m_EndScreen.FindAction("Rematch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Fall;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_WJump;
    private readonly InputAction m_Player_Attack;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Fall => m_Wrapper.m_Player_Fall;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @WJump => m_Wrapper.m_Player_WJump;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Fall.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFall;
                @Fall.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFall;
                @Fall.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFall;
                @Dash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @WJump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWJump;
                @WJump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWJump;
                @WJump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWJump;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Fall.started += instance.OnFall;
                @Fall.performed += instance.OnFall;
                @Fall.canceled += instance.OnFall;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @WJump.started += instance.OnWJump;
                @WJump.performed += instance.OnWJump;
                @WJump.canceled += instance.OnWJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // SelectScreen
    private readonly InputActionMap m_SelectScreen;
    private ISelectScreenActions m_SelectScreenActionsCallbackInterface;
    private readonly InputAction m_SelectScreen_Player1Switch;
    private readonly InputAction m_SelectScreen_Player2Switch;
    private readonly InputAction m_SelectScreen_StartGame;
    public struct SelectScreenActions
    {
        private @Controls m_Wrapper;
        public SelectScreenActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1Switch => m_Wrapper.m_SelectScreen_Player1Switch;
        public InputAction @Player2Switch => m_Wrapper.m_SelectScreen_Player2Switch;
        public InputAction @StartGame => m_Wrapper.m_SelectScreen_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_SelectScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectScreenActions set) { return set.Get(); }
        public void SetCallbacks(ISelectScreenActions instance)
        {
            if (m_Wrapper.m_SelectScreenActionsCallbackInterface != null)
            {
                @Player1Switch.started -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnPlayer1Switch;
                @Player1Switch.performed -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnPlayer1Switch;
                @Player1Switch.canceled -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnPlayer1Switch;
                @Player2Switch.started -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnPlayer2Switch;
                @Player2Switch.performed -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnPlayer2Switch;
                @Player2Switch.canceled -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnPlayer2Switch;
                @StartGame.started -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_SelectScreenActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_SelectScreenActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Player1Switch.started += instance.OnPlayer1Switch;
                @Player1Switch.performed += instance.OnPlayer1Switch;
                @Player1Switch.canceled += instance.OnPlayer1Switch;
                @Player2Switch.started += instance.OnPlayer2Switch;
                @Player2Switch.performed += instance.OnPlayer2Switch;
                @Player2Switch.canceled += instance.OnPlayer2Switch;
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public SelectScreenActions @SelectScreen => new SelectScreenActions(this);

    // StartScreen
    private readonly InputActionMap m_StartScreen;
    private IStartScreenActions m_StartScreenActionsCallbackInterface;
    private readonly InputAction m_StartScreen_StartGame;
    public struct StartScreenActions
    {
        private @Controls m_Wrapper;
        public StartScreenActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_StartScreen_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_StartScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StartScreenActions set) { return set.Get(); }
        public void SetCallbacks(IStartScreenActions instance)
        {
            if (m_Wrapper.m_StartScreenActionsCallbackInterface != null)
            {
                @StartGame.started -= m_Wrapper.m_StartScreenActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_StartScreenActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_StartScreenActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_StartScreenActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public StartScreenActions @StartScreen => new StartScreenActions(this);

    // EndScreen
    private readonly InputActionMap m_EndScreen;
    private IEndScreenActions m_EndScreenActionsCallbackInterface;
    private readonly InputAction m_EndScreen_Rematch;
    public struct EndScreenActions
    {
        private @Controls m_Wrapper;
        public EndScreenActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rematch => m_Wrapper.m_EndScreen_Rematch;
        public InputActionMap Get() { return m_Wrapper.m_EndScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EndScreenActions set) { return set.Get(); }
        public void SetCallbacks(IEndScreenActions instance)
        {
            if (m_Wrapper.m_EndScreenActionsCallbackInterface != null)
            {
                @Rematch.started -= m_Wrapper.m_EndScreenActionsCallbackInterface.OnRematch;
                @Rematch.performed -= m_Wrapper.m_EndScreenActionsCallbackInterface.OnRematch;
                @Rematch.canceled -= m_Wrapper.m_EndScreenActionsCallbackInterface.OnRematch;
            }
            m_Wrapper.m_EndScreenActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rematch.started += instance.OnRematch;
                @Rematch.performed += instance.OnRematch;
                @Rematch.canceled += instance.OnRematch;
            }
        }
    }
    public EndScreenActions @EndScreen => new EndScreenActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFall(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnWJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface ISelectScreenActions
    {
        void OnPlayer1Switch(InputAction.CallbackContext context);
        void OnPlayer2Switch(InputAction.CallbackContext context);
        void OnStartGame(InputAction.CallbackContext context);
    }
    public interface IStartScreenActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
    public interface IEndScreenActions
    {
        void OnRematch(InputAction.CallbackContext context);
    }
}
